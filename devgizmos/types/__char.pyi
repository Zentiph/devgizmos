# pylint: disable=all

from abc import abstractmethod
from typing import (
    Iterable,
    Iterator,
    Literal,
    Protocol,
    Self,
    SupportsIndex,
    Union,
    Tuple,
    TypeAlias,
)

class _HasStrDunder(Protocol):
    @abstractmethod
    def __str__(self) -> str:
        pass

class _HasCharDunder(Protocol):
    @abstractmethod
    def __char__(self) -> Char:
        pass

ConvertibleToStr: TypeAlias = _HasStrDunder
ConvertibleToChar: TypeAlias = _HasCharDunder

class Char:
    def __new__(
        cls, obj: Union[ConvertibleToStr, ConvertibleToChar] = ..., /
    ) -> Self: ...
    def capitalize(self) -> "Char": ...
    def casefold(self) -> "Char": ...
    def encode(self, encoding: str = "utf-8", errors: str = "strict") -> bytes: ...
    def isalnum(self) -> bool: ...
    def isalpha(self) -> bool: ...
    def isascii(self) -> bool: ...
    def isdecimal(self) -> bool: ...
    def isdigit(self) -> bool: ...
    def isidentifier(self) -> bool: ...
    def islower(self) -> bool: ...
    def isnumeric(self) -> bool: ...
    def isprintable(self) -> bool: ...
    def isspace(self) -> bool: ...
    def istitle(self) -> bool: ...
    def isupper(self) -> bool: ...
    def join(self, iterable: Iterable[str], /) -> str: ...
    def lower(self) -> "Char": ...
    def swapcase(self) -> "Char": ...
    def upper(self) -> "Char": ...
    def __add__(self, value: str, /) -> str: ...
    def __contains__(self, key: str, /) -> bool: ...
    def __eq__(self, value: object, /) -> bool: ...
    def __ge__(self, value: str, /) -> bool: ...
    def __getitem__(self, key: SupportsIndex | slice, /) -> str: ...
    def __gt__(self, value: str, /) -> bool: ...
    def __hash__(self) -> int: ...
    def __iter__(self) -> Iterator[str]: ...
    def __le__(self, value: str, /) -> bool: ...
    def __len__(self) -> Literal[1]: ...
    def __lt__(self, value: str, /) -> bool: ...
    def __mul__(self, value: SupportsIndex, /) -> str: ...
    def __bool__(self) -> Literal[True]: ...
    def __bytes__(self) -> bytes: ...
    def __complex__(self) -> complex: ...
    def __float__(self) -> float: ...
    def __int__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getnewargs__(self) -> Tuple[str]: ...
