# pylint: disable=all

from types import TracebackType
from typing import Any, Callable, Optional, Self, Type, TypeVar, Union

F = TypeVar("F", bound=Callable[..., Any])

class Seed:
    def __init__(
        self, seed: Optional[Union[int, float, str, bytes, bytearray]]
    ) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(
        self,
        type_: Optional[Type[BaseException]],
        value: Optional[BaseException],
        traceback: Optional[TracebackType],
    ): ...
    def __call__(self, func: F, /) -> F: ...
    @classmethod
    def generate(cls) -> Seed: ...
    def generate_seed(self) -> None: ...
    @property
    def seed(self) -> Union[int, float, str, bytes, bytearray, None]: ...
    @seed.setter
    def seed(
        self, s: Optional[Union[int, float, str, bytes, bytearray]], /
    ) -> None: ...
    def get(self, func: Callable[..., Any], *args: Any, **kwargs: Any) -> Any: ...
    def set_state(self) -> None: ...
    def revert_state(self) -> None: ...
    def reset_state(self) -> None: ...
    def clone(self) -> Seed: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
