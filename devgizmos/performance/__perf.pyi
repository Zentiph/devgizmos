# pylint: disable=all

import logging
from types import TracebackType
from typing import Any, Callable, Literal, Optional, Self, Type, TypeVar, Union

from ..types import Function

F = TypeVar("F", bound=Callable[..., Any])
LoggingLevel = int

class NotStartedError(Exception): ...
class ReactivationError(Exception): ...

class Timer:
    def __init__(
        self,
        unit: Literal["ns", "us", "ms", "s"] = "ns",
        precision: int = 3,
    ) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(
        self,
        type_: Optional[Type[BaseException]],
        value: Optional[BaseException],
        traceback: Optional[TracebackType],
    ) -> None: ...
    def __call__(self, func: F, /) -> F: ...
    @property
    def elapsed(self) -> float: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def pause(self) -> None: ...
    def resume(self) -> None: ...
    def reset(self) -> None: ...

class Benchmark:
    def __init__(
        self,
        trials: int = 10,
        unit: Literal["ns", "us", "ms", "s"] = "ns",
        precision: int = 3,
    ) -> None: ...
    def __call__(self, func: F, /) -> F: ...
    @property
    def average(self) -> float: ...
    @property
    def minimum(self) -> float: ...
    @property
    def maximum(self) -> float: ...

class MemoryProfiler:
    def __init__(
        self,
        unit: Literal["b", "kb", "mb", "gb", "kib", "mib", "gib"] = "kb",
        precision: int = 3,
    ) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(
        self,
        type_: Optional[Type[BaseException]],
        value: Optional[BaseException],
        traceback: Optional[TracebackType],
    ) -> None: ...
    def __call__(self, func: F, /) -> F: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def pause(self) -> None: ...
    def resume(self) -> None: ...
    @property
    def memory_used(self) -> Union[int, float]: ...
